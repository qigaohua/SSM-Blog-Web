<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="ssm.blog.dao.BlogDao">

	<resultMap type="Blog" id="blogResultMap">
		<id column="id" property="id"/>
		<result column="title" property="title"/>
		<result column="summary" property="summary"/>
		<result column="content" property="content"/>
		<result column="releaseDate" property="releaseDate"/>
		<result column="updateDate" property="updateDate"/>
		<result column="keyWord" property="keyWord"/>
		<result column="clickHit" property="clickHit"/>
		<result column="likes" property="likes"/>
		
		<association property="blogType" column="blogType_id" select="ssm.blog.dao.BlogTypeDao.getBlogTypeById">
		
		</association>
	</resultMap>
	
	<!-- 获取所有博客 id, title, releaseDate -->
	<select id="getAllBlogs" resultMap="blogResultMap">
		select id, title, releaseDate from blog ORDER BY releaseDate DESC
	</select>

	<select id="getBlogPage" parameterType="Map" resultMap="blogResultMap">
		select id, title, summary, releaseDate, updateDate, keyWord, clickHit, likes, blogType_id  from blog
		<where>
			<if test="title != null and title != ''">
				title like "%"#{title}"%"
			</if>
		</where> 
	
		ORDER BY releaseDate DESC limit #{start}, #{end}
	</select>
	
	<select id="getBlogById" parameterType="java.lang.Integer" resultMap="blogResultMap">
		select * from blog where id=#{id}
	</select>
	
	<select id="getBlogTotal" resultType="Long">
		select count(id) from blog
	</select>
	
	<!-- 获取浏览量前五的博客 -->
	<select id="getBlogsByClickhit" resultMap="blogResultMap">
		select id, title, releaseDate from blog order by clickHit desc limit 5
	</select>
	
	<!-- 获取点赞数量前五的博客 -->
	<select id="getBlogsByLikes" resultMap="blogResultMap">
		select id, title, releaseDate from blog order by likes desc limit 5
	</select>
	
	<!-- 根据博客类别，分页获取博客 -->
	<select id="getClassifyBlogsOfPage" parameterType="Map" resultMap="blogResultMap">
		select id, title, summary, releaseDate, updateDate, clickHit, likes, blogType_id 
		from blog 
		where blogType_id=#{blogTypeId} 
		ORDER BY releaseDate DESC limit #{start}, #{end}
	</select>
	
	<!-- 获取某个类别下的博客数量总数 -->
	<select id="getClassifyBlogTotal" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		select count(id) from blog where blogType_id=#{blogTypeId}
	</select>
	
	<select id="getTagsBlogsOfPage" parameterType="Map" resultMap="blogResultMap">
		SELECT B.id, B.title, B.summary, B.releaseDate, B.updateDate, B.clickHit, B.likes, B.blogType_id FROM blog AS B
			JOIN blog_tags_map AS BT ON B.id = BT.bid
			WHERE BT.tid=#{tagsId}
			ORDER BY releaseDate DESC limit #{start}, #{end}
	</select>
	
	<select id="getTagsBlogTotal" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(B.id) FROM blog AS B
			JOIN blog_tags_map AS BT ON B.id = BT.bid
			WHERE BT.tid=#{tagsId}
	</select>
	
	
	<!-- 根据id获取上一篇博客 -->
	<select id="getPreBlogById" parameterType="java.lang.Integer" resultMap="blogResultMap">
		select id, title from blog where id &lt; #{id} ORDER BY id DESC limit 1
	</select>
	
	<!-- 根据id获取下一篇博客 -->
	<select id="getAfterBlogById" parameterType="java.lang.Integer" resultMap="blogResultMap">
		select id, title from blog where id &gt; #{id}  limit 1
	</select>
	
	<delete id="delBlogById" parameterType="java.lang.Integer">
		delete from blog where id=#{id}
	</delete>
	
	<!-- 添加一篇博客 -->
	<insert id="insertBlog" parameterType="Blog">
		insert into blog (title, summary, content, releaseDate, updateDate, keyWord, clickHit, likes, blogType_id)
				values (#{title}, #{summary}, #{content}, now(), now(), #{keyWord}, 0, 0, #{blogType.id})
				
		<selectKey resultType="java.lang.Integer" keyProperty="id">
			SELECT LAST_INSERT_ID() AS id
		</selectKey>
	</insert>
	
	<!-- 更新博客内容 -->
	<update id="updateBlog" parameterType="Blog">
		update blog set title=#{title}, summary=#{summary}, content=#{content}, updateDate=now(), 
						keyWord=#{keyWord}, blogType_id=#{blogType.id} where id=#{id}
	</update>
	
	<!-- 根据id更新blog点赞数量  -->
	<update id="updateBlogLikes" parameterType="java.lang.Integer">
		update blog set likes=#{value} where id=#{id} 
	</update>
	
	<!-- 根据id更新blog点击量+1  -->
	<update id="updateBlogclickHit" parameterType="java.lang.Integer">
		update blog set clickHit=clickHit+1 where id=#{id}
	</update>
	
	<!--从标题、正文模糊搜索匹配的博客  --> 
	<select id="selectBlogsByTitleAndContent" parameterType="String" resultMap="blogResultMap" >
		SELECT id, title, summary, releaseDate, updateDate, clickHit, likes, blogType_id
		 FROM blog WHERE POSITION(#{searchValue} IN title) OR POSITION(#{searchValue} IN content)
	</select>

</mapper>
